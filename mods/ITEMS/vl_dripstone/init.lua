--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Michieal.
--- DateTime: 6/2/25 9:41PM
--- License for Media: CC-BY-SA 4.0 (except where noted); Code: GPLv3
--- Copyright (C) 2025, Michieal. See License.txt

--- LOCALS
local modname = core.get_current_modname()
local S = core.get_translator(modname)

-- Define the dripstone block
local dripstone_block_definition = {
  description = S("Dripstone Block"),
  tiles = {"vl_dripstone_block.png"},
  material = core.getDefault("stone_material"),
  groups = {group_stone = 1},
  drop = "vl_dripstone:dripstone_block",
  sounds = default.node_sound_stone_defaults(),
}

-- Define the pointed dripstone
local pointed_dripstone_definition = {
  description = S("Pointed Dripstone"),
  tiles = {"vl_pointed_dripstone.png"},
  material = core.getDefault("stone_material"),
  groups = {cracky = 2, falling_node = 1},
  drop = "vl_dripstone:pointed_dripstone",
  sounds = default.node_sound_stone_defaults(),
}

-- Crafting recipe for dripstone block
core.register_craft({
  output = "vl_dripstone:dripstone_block",
  recipe = {
    {"vl_dripstone:pointed_dripstone", "vl_dripstone:pointed_dripstone"},
    {"vl_dripstone:pointed_dripstone", "vl_dripstone:pointed_dripstone"},
  }
})

-- Dripstone Block on_place function
dripstone_block_definition.on_place = function(itemstack, placer, pointed_thing)
	if not pointed_thing or pointed_thing.type ~= "node" then
		return itemstack
	end

	local pos = pointed_thing.under
	local node = core.get_node(pos)

	-- Use pointed node's on_rightclick function first, if present
	if core.registered_nodes[node.name] and core.registered_nodes[node.name].on_rightclick then
		local result = core.registered_nodes[node.name].on_rightclick(pos, node, placer, itemstack)
		if result then
			return result
		end
	end
	if core.get_node(pos).name == "air" then
		return itemstack
	end

	local def = core.registered_nodes[node.name]
	if not (def and def.buildable_to and def.buildable_to()) then
		return itemstack
	end

	core.set_node(pointed_thing.above, {name = "vl_dripstone:dripstone_block"})
	itemstack:take_item(1)

	return itemstack
end

-- Pointed Dripstone on_place function
pointed_dripstone_definition.on_place = function(itemstack, placer, pointed_thing)
  if not pointed_thing or pointed_thing.type ~= "node" then
	  return itemstack
  end

  local pos = pointed_thing.under
  local node = core.get_node(pos)

  -- Use pointed node's on_rightclick function first, if present
  if core.registered_nodes[node.name] and core.registered_nodes[node.name].on_rightclick then
    local result = core.registered_nodes[node.name].on_rightclick(pos, node, placer, itemstack)
    if result then
		return result
    end
  end

  -- Check if the pointed_thing is the top or bottom face of a solid node
  local normal = pointed_thing.normal
  if normal.y ~= 1 and normal.y ~= -1 then
	  return itemstack
  end

  if core.get_node(pos).name == "air" then
	  return itemstack
  end
  local def = core.registered_nodes[node.name]
  if not (def and def.buildable_to and def.buildable_to()) then
	  return itemstack
  end

  core.set_node(pointed_thing.above, {name = "vl_dripstone:pointed_dripstone"})
  itemstack:take_item(1)
  return itemstack
end

-- Register the pointed dripstone node
core.register_node("vl_dripstone:pointed_dripstone", pointed_dripstone_definition)

-- Register the dripstone block node
core.register_node("vl_dripstone:dripstone_block", dripstone_block_definition)

core.register_abm({
  label = "Pointed Dripstone Cauldron Fill",
  nodenames = {"vl_dripstone:pointed_dripstone"},
  interval = 35, -- Average time for Minecraft drip (approximately every 1.75 seconds, so 20 ticks * 1.75)
  chance = 378, -- Same chance as Minecraft Java Edition (6 blocks per 10287 game ticks)
  action = function(pos, node)
    local above_pos = {x = pos.x, y = pos.y + 2, z = pos.z}
    local below_pos = {x = pos.x, y = pos.y - 1, z = pos.z}

    local above_node = core.get_node(above_pos)
    local below_node = core.get_node(below_pos)

    if below_node.name == "default:cauldron" then
      if above_node.name == "default:water_source" or above_node.name == "default:water_flowing" then
        core.set_node(below_pos, {name = "default:cauldron_water"})
      elseif above_node.name == "default:lava_source" or above_node.name == "default:lava_flowing" then
        core.set_node(below_pos, {name = "default:cauldron_lava"})
      end
    end
  end,
})
